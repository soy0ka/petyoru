// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userPats      UserPats?    @relation("UserToPats")
  yoruEnhance   YoruEnhance? @relation("UserToEnhance")
  userItems     UserItem[]   @relation("UserToItems") // 사용자가 보유한 아이템 관계 추가
  equipped      Equipped?    // 착용 중인 아이템 관계 추가
  createdAt     DateTime     @default(now())
}

model UserPats {
  id              String   @id @default(cuid())
  userId          String   @unique
  count           Int      @default(0)  // 현재 보유한 쓰다듬기 포인트
  totalPatCount   Int      @default(0)  // 누적 쓰다듬기 횟수 (통계용)
  lastPatAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserToPats")

  @@index([userId])
}

model YoruEnhance {
  id          String @id @default(cuid())
  userId      String @unique
  level       Int    @default(1)
  exp         Int    @default(0)
  failCount   Int    @default(0)
  successRate Int    @default(90)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserToEnhance")

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 상점 아이템 모델 추가
model ShopItem {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Int
  image       String
  effect      String
  category    String
  reusable    Boolean    @default(false) // 중복 구매 가능 여부
  userItems   UserItem[] @relation("ItemToUsers")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// 착용 중인 아이템을 저장하는 모델 수정
model Equipped {
  id        String          @id @default(cuid())
  userId    String          @unique
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     EquippedItem[]  // EquippedItem과의 관계 추가
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([userId])
}

// EquippedItem 모델 수정
model EquippedItem {
  id         String   @id @default(cuid())
  equippedId String
  itemId     String
  equipped   Equipped @relation(fields: [equippedId], references: [id], onDelete: Cascade)
  
  @@index([equippedId])
}

// 사용자가 구매한 아이템 관계 모델 추가
model UserItem {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserToItems")
  item      ShopItem @relation(fields: [itemId], references: [id], name: "ItemToUsers")
  isEquipped Boolean  @default(false) // 아이템 장착 여부
  purchasedAt DateTime @default(now())

  @@unique([userId, itemId]) // 동일한 아이템을 여러 번 구매 불가
  @@index([userId])
  @@index([itemId])
}
