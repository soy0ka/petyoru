// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userPats      UserPats?    @relation("UserToPats")
  yoruEnhance   YoruEnhance? @relation("UserToEnhance")
}

model UserPats {
  id     String @id @default(cuid())
  userId String @unique
  count  Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserToPats")

  @@index([userId])
}

model YoruEnhance {
  id          String @id @default(cuid())
  userId      String @unique
  level       Int    @default(1)
  exp         Int    @default(0)
  failCount   Int    @default(0)
  successRate Int    @default(90)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserToEnhance")

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
